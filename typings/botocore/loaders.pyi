from typing import Any, Optional

from botocore import BOTOCORE_ROOT as BOTOCORE_ROOT
from botocore.compat import OrderedDict as OrderedDict
from botocore.exceptions import DataNotFoundError as DataNotFoundError
from botocore.exceptions import UnknownServiceError as UnknownServiceError
from botocore.utils import deep_merge as deep_merge

def instance_cache(func: Any) -> Any: ...

class JSONFileLoader:
    def exists(self, file_path: Any) -> Any: ...
    def load_file(self, file_path: Any) -> Any: ...

def create_loader(search_path_string: Optional[Any] = ...) -> Any: ...

class Loader:
    FILE_LOADER_CLASS: Any = ...
    BUILTIN_DATA_PATH: Any = ...
    CUSTOMER_DATA_PATH: Any = ...
    BUILTIN_EXTRAS_TYPES: Any = ...
    file_loader: Any = ...
    def __init__(
        self,
        extra_search_paths: Optional[Any] = ...,
        file_loader: Optional[Any] = ...,
        cache: Optional[Any] = ...,
        include_default_search_paths: bool = ...,
        include_default_extras: bool = ...,
    ) -> None: ...
    @property
    def search_paths(self) -> Any: ...
    @property
    def extras_types(self) -> Any: ...
    def list_available_services(self, type_name: Any) -> Any: ...
    def determine_latest_version(self, service_name: Any, type_name: Any) -> Any: ...
    def list_api_versions(self, service_name: Any, type_name: Any) -> Any: ...
    def load_service_model(
        self, service_name: Any, type_name: Any, api_version: Optional[Any] = ...
    ) -> Any: ...
    def load_data(self, name: Any) -> Any: ...

class ExtrasProcessor:
    def process(self, original_model: Any, extra_models: Any) -> None: ...
