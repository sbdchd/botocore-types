from typing import Any, Optional

from botocore.compat import MD5_AVAILABLE as MD5_AVAILABLE
from botocore.compat import OrderedDict as OrderedDict
from botocore.compat import get_md5 as get_md5
from botocore.compat import get_tzinfo_options as get_tzinfo_options
from botocore.compat import quote as quote
from botocore.compat import urlparse as urlparse
from botocore.compat import urlsplit as urlsplit
from botocore.compat import urlunsplit as urlunsplit
from botocore.compat import zip_longest as zip_longest
from botocore.exceptions import ClientError as ClientError
from botocore.exceptions import ConfigNotFound as ConfigNotFound
from botocore.exceptions import ConnectionClosedError as ConnectionClosedError
from botocore.exceptions import ConnectTimeoutError as ConnectTimeoutError
from botocore.exceptions import EndpointConnectionError as EndpointConnectionError
from botocore.exceptions import HTTPClientError as HTTPClientError
from botocore.exceptions import InvalidDNSNameError as InvalidDNSNameError
from botocore.exceptions import InvalidExpressionError as InvalidExpressionError
from botocore.exceptions import InvalidHostLabelError as InvalidHostLabelError
from botocore.exceptions import InvalidIMDSEndpointError as InvalidIMDSEndpointError
from botocore.exceptions import InvalidRegionError as InvalidRegionError
from botocore.exceptions import MetadataRetrievalError as MetadataRetrievalError
from botocore.exceptions import ReadTimeoutError as ReadTimeoutError
from botocore.exceptions import SSOTokenLoadError as SSOTokenLoadError
from botocore.exceptions import (
    UnsupportedOutpostResourceError as UnsupportedOutpostResourceError,
)
from botocore.exceptions import (
    UnsupportedS3AccesspointConfigurationError as UnsupportedS3AccesspointConfigurationError,
)
from botocore.exceptions import UnsupportedS3ArnError as UnsupportedS3ArnError
from botocore.exceptions import (
    UnsupportedS3ControlArnError as UnsupportedS3ControlArnError,
)
from botocore.exceptions import (
    UnsupportedS3ControlConfigurationError as UnsupportedS3ControlConfigurationError,
)

DEFAULT_METADATA_SERVICE_TIMEOUT: int
METADATA_BASE_URL: str
METADATA_BASE_URL_IPv6: str
SAFE_CHARS: str
LABEL_RE: Any
RETRYABLE_HTTP_ERRORS: Any
S3_ACCELERATE_WHITELIST: Any
EVENT_ALIASES: Any
IPV4_PAT: str
HEX_PAT: str
LS32_PAT: Any
UNRESERVED_PAT: str
IPV6_PAT: Any
ZONE_ID_PAT: Any
IPV6_ADDRZ_PAT: Any
IPV6_ADDRZ_RE: Any

def ensure_boolean(val: Any) -> Any: ...
def is_json_value_header(shape: Any) -> Any: ...
def get_service_module_name(service_model: Any) -> Any: ...
def normalize_url_path(path: Any) -> Any: ...
def normalize_boolean(val: Any) -> Any: ...
def remove_dot_segments(url: Any) -> Any: ...
def validate_jmespath_for_set(expression: Any) -> None: ...
def set_value_from_jmespath(
    source: Any, expression: Any, value: Any, is_first: bool = ...
) -> Any: ...

class _RetriesExceededError(Exception): ...

class BadIMDSRequestError(Exception):
    request: Any = ...
    def __init__(self, request: Any) -> None: ...

class IMDSFetcher:
    def __init__(
        self,
        timeout: Any = ...,
        num_attempts: int = ...,
        base_url: Any = ...,
        env: Optional[Any] = ...,
        user_agent: Optional[Any] = ...,
        config: Optional[Any] = ...,
    ) -> None: ...
    def get_base_url(self) -> Any: ...

class InstanceMetadataFetcher(IMDSFetcher):
    def retrieve_iam_role_credentials(self) -> Any: ...

def merge_dicts(dict1: Any, dict2: Any, append_lists: bool = ...) -> None: ...
def lowercase_dict(original: Any) -> Any: ...
def parse_key_val_file(filename: Any, _open: Any = ...) -> Any: ...
def parse_key_val_file_contents(contents: Any) -> Any: ...
def percent_encode_sequence(mapping: Any, safe: Any = ...) -> Any: ...
def percent_encode(input_str: Any, safe: Any = ...) -> Any: ...
def parse_timestamp(value: Any) -> Any: ...
def parse_to_aware_datetime(value: Any) -> Any: ...
def datetime2timestamp(dt: Any, default_timezone: Optional[Any] = ...) -> Any: ...
def calculate_sha256(body: Any, as_hex: bool = ...) -> Any: ...
def calculate_tree_hash(body: Any) -> Any: ...

class CachedProperty:
    def __init__(self, fget: Any) -> None: ...
    def __get__(self, obj: Any, cls: Any) -> Any: ...

class ArgumentGenerator:
    def __init__(self, use_member_names: bool = ...) -> None: ...
    def generate_skeleton(self, shape: Any) -> Any: ...

def is_valid_ipv6_endpoint_url(endpoint_url: Any) -> Any: ...
def is_valid_endpoint_url(endpoint_url: Any) -> Any: ...
def is_valid_uri(endpoint_url: Any) -> Any: ...
def validate_region_name(region_name: Any) -> None: ...
def check_dns_name(bucket_name: Any) -> Any: ...
def fix_s3_host(
    request: Any,
    signature_version: Any,
    region_name: Any,
    default_endpoint_url: Optional[str] = ...,
    **kwargs: Any
) -> None: ...
def switch_to_virtual_host_style(
    request: Any,
    signature_version: Any,
    default_endpoint_url: Optional[str] = ...,
    **kwargs: Any
) -> None: ...
def instance_cache(func: Any) -> Any: ...
def switch_host_s3_accelerate(
    request: Any, operation_name: Any, **kwargs: Any
) -> None: ...
def switch_host_with_param(request: Any, param_name: Any) -> None: ...
def deep_merge(base: Any, extra: Any) -> None: ...
def hyphenize_service_id(service_id: Any) -> Any: ...

class S3RegionRedirector:
    def __init__(
        self, endpoint_bridge: Any, client: Any, cache: Optional[Any] = ...
    ) -> None: ...
    def register(self, event_emitter: Optional[Any] = ...) -> None: ...
    def redirect_from_error(
        self, request_dict: Any, response: Any, operation: Any, **kwargs: Any
    ) -> Any: ...
    def get_bucket_region(self, bucket: Any, response: Any) -> Any: ...
    def set_request_url(self, params: Any, context: Any, **kwargs: Any) -> None: ...
    def redirect_from_cache(self, params: Any, context: Any, **kwargs: Any) -> None: ...

class InvalidArnException(ValueError): ...

class ArnParser:
    def parse_arn(self, arn: Any) -> Any: ...

class S3ArnParamHandler:
    def __init__(self, arn_parser: Optional[Any] = ...) -> None: ...
    def register(self, event_emitter: Any) -> None: ...
    def handle_arn(
        self, params: Any, model: Any, context: Any, **kwargs: Any
    ) -> None: ...

class S3EndpointSetter:
    def __init__(
        self,
        endpoint_resolver: Any,
        region: Optional[Any] = ...,
        s3_config: Optional[Any] = ...,
        endpoint_url: Optional[str] = ...,
        partition: Optional[Any] = ...,
    ) -> None: ...
    def register(self, event_emitter: Any) -> None: ...
    def set_endpoint(self, request: Any, **kwargs: Any) -> None: ...

class S3ControlEndpointSetter:
    def __init__(
        self,
        endpoint_resolver: Any,
        region: Optional[Any] = ...,
        s3_config: Optional[Any] = ...,
        endpoint_url: Optional[str] = ...,
        partition: Optional[Any] = ...,
    ) -> None: ...
    def register(self, event_emitter: Any) -> None: ...
    def set_endpoint(self, request: Any, **kwargs: Any) -> None: ...

class S3ControlArnParamHandler:
    def __init__(self, arn_parser: Optional[Any] = ...) -> None: ...
    def register(self, event_emitter: Any) -> None: ...
    def handle_arn(
        self, params: Any, model: Any, context: Any, **kwargs: Any
    ) -> None: ...

class ContainerMetadataFetcher:
    TIMEOUT_SECONDS: int = ...
    RETRY_ATTEMPTS: int = ...
    SLEEP_TIME: int = ...
    IP_ADDRESS: str = ...
    def __init__(self, session: Optional[Any] = ..., sleep: Any = ...) -> None: ...
    def retrieve_full_uri(self, full_url: Any, headers: Optional[Any] = ...) -> Any: ...
    def retrieve_uri(self, relative_uri: Any) -> Any: ...
    def full_url(self, relative_uri: Any) -> Any: ...

def get_environ_proxies(url: Any) -> Any: ...
def should_bypass_proxies(url: Any) -> Any: ...
def get_encoding_from_headers(headers: Any, default: str = ...) -> Any: ...
def calculate_md5(body: Any, **kwargs: Any) -> Any: ...
def conditionally_calculate_md5(params: Any, **kwargs: Any) -> None: ...

class FileWebIdentityTokenLoader:
    def __init__(self, web_identity_token_path: Any, _open: Any = ...) -> None: ...
    def __call__(self) -> Any: ...

class SSOTokenLoader:
    def __init__(self, cache: Optional[Any] = ...) -> None: ...
    def __call__(self, start_url: Any) -> Any: ...
